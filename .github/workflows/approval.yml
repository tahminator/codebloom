name: Approvals

on:
  pull_request_review:
    types: [submitted]
  pull_request:
    types: [opened, reopened, synchronize]

permissions:
  pull-requests: read
  contents: read
  statuses: write

jobs:
  enforce-approvals:
    name: Enforce Approvals

    runs-on: ubuntu-latest

    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const OWNER = 'tahminator';
            const GUARDIANS = ['angelayu0530', 'Arshadul-Monir'];

            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
            });

            const latest = Object.fromEntries(
              reviews.map(r => [r.user.login, r.state.toUpperCase()])
            );

            const approved = Object.keys(latest).filter(u => latest[u] === 'APPROVED');

            const hasOwner = approved.includes(OWNER);
            const hasGuardian = GUARDIANS.some(u => approved.includes(u));

            let state, description;

            if (hasOwner && hasGuardian) {
              state = 'success';
              description = 'All approvals received.';
            } else {
              state = 'failure';
              const missing = [];
              if (!hasGuardian)
                missing.push(`guardian (${GUARDIANS.filter(u => !approved.includes(u)).join(', ')})`);
              if (!hasOwner) missing.push(`owner (${OWNER})`);
              description = `Missing ${missing.join(' and ')}`;
            }

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state,
              context: 'approval-check',
              description,
            });
