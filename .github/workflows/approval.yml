name: Approvals

on:
  pull_request_review:
    types: [submitted]
  pull_request:
    types: [opened, reopened, synchronize]

permissions:
  pull-requests: read
  contents: read
  statuses: write

jobs:
  enforce-approvals:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const OWNER = 'tahminator';
            const GUARDIANS = ['angelayu0530', 'Arshadul-Monir'];

            /**
             * Fetch all reviews for this PR
             */
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
            });

            /**
             * Map -> latest review state per user
             */
            const latest = {};
            for (const r of reviews) {
              latest[r.user.login] = r.state;
            }

            /**
             * Normalize to uppercase "APPROVED"
             */
            const approved = Object.entries(latest)
              .filter(([_, s]) => s.toUpperCase() === 'APPROVED')
              .map(([u]) => u);

            const hasOwnerApproval = approved.includes(OWNER);
            const hasGuardianApproval = GUARDIANS.some(u => approved.includes(u));

            if (hasGuardianApproval && hasOwnerApproval) {
              console.log('Approval condition met.');
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.payload.pull_request.head.sha,
                state: 'success',
                context: 'approval-check',
                description: '(A||B)&&C satisfied',
              });
            } else {
              console.log('Approval condition not met.');
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.payload.pull_request.head.sha,
                state: 'failure',
                context: 'approval-check',
                description: 'Need one of A/B AND C',
              });
              process.exit(1);
            }
