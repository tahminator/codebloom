name: CI/CD
run-name: Running CI/CD on ${{ github.actor }}'s commits

on:
    push:
        branches:
            - main
    pull_request:

concurrency:
    group: ci-${{ github.ref }}
    cancel-in-progress: true

jobs:
    frontendTests:
        name: Frontend Tests
        runs-on: ubuntu-latest

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20

            - name: Fix a bug with corepack by installing corepack globally
              run: npm i -g corepack@latest
              working-directory: js

            - name: Install Dependencies
              run: corepack enable pnpm && pnpm i --frozen-lockfile
              working-directory: js

            - name: Run full suite of tests + linters + autoformatters
              run: pnpm run test
              working-directory: js

    backendTests:
        name: Backend Tests
        runs-on: ubuntu-latest
        needs: frontendTests

        env:
            DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
            DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
            DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
            DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
            DATABASE_USER: ${{ secrets.DATABASE_USER }}
            DISCORD_CLIENT_ID: ${{ secrets.DISCORD_CLIENT_ID }}
            DISCORD_CLIENT_SECRET: ${{ secrets.DISCORD_CLIENT_SECRET }}
            ENABLE_DOCUMENTATION: ${{ secrets.ENABLE_DOCUMENTATION }}
            GH_USERNAME: ${{ secrets.GH_USERNAME }}
            GH_PASSWORD: ${{ secrets.GH_PASSWORD }}
            DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
            DISCORD_SERVER_ID: ${{ secrets.DISCORD_SERVER_ID }}
            GH_EMAIL_HOST: ${{ secrets.GH_EMAIL_HOST }}
            GH_EMAIL_PORT: ${{ secrets.GH_EMAIL_PORT }}
            GH_EMAIL_TYPE: ${{ secrets.GH_EMAIL_TYPE }}
            GH_EMAIL_USERNAME: ${{ secrets.GH_EMAIL_USERNAME }}
            GH_EMAIL_PASSWORD: ${{ secrets.GH_EMAIL_PASSWORD }}
            CODEBLOOM_EMAIL_HOST: ${{ secrets.CODEBLOOM_EMAIL_HOST }}
            CODEBLOOM_EMAIL_PORT: ${{ secrets.CODEBLOOM_EMAIL_PORT }}
            CODEBLOOM_EMAIL_TYPE: ${{ secrets.CODEBLOOM_EMAIL_TYPE }}
            CODEBLOOM_EMAIL_USERNAME: ${{ secrets.CODEBLOOM_EMAIL_USERNAME }}
            CODEBLOOM_EMAIL_PASSWORD: ${{ secrets.CODEBLOOM_EMAIL_PASSWORD }}
            SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
            SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
            SKIP: ${{ secrets.SKIP }}
            VITE_DSN: ${{ secrets.VITE_DSN }}
            SECRET_KEY: ${{ secrets.SECRET_KEY }}

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Set up OpenJDK 21
              run: sudo apt-get update && sudo apt-get install -y openjdk-21-jdk

            - name: Set JAVA_HOME to Java 21
              run: |
                  echo "JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64" >> $GITHUB_ENV
                  echo "/usr/lib/jvm/java-21-openjdk-amd64/bin" >> $GITHUB_PATH

            - name: Verify Java version
              run: |
                  java -version
                  javac -version
                  echo "JAVA_HOME=$JAVA_HOME"

            # - name: Cache Maven Dependencies
            #   uses: actions/cache@v3
            #   with:
            #     path: ~/.m2
            #     key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
            #     restore-keys: maven-${{ runner.os }}-

            - name: Build & Install
              run: ./mvnw -B install -D skipTests --no-transfer-progress -Denv.SKIP=true

            - name: Run Checkstyle
              run: ./mvnw checkstyle:check -Denv.SKIP=true

            - name: Ensure browsers are installed
              run: ./mvnw exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install --with-deps" -Denv.SKIP=true

            - name: Run Tests
              run: ./mvnw test -Denv.SKIP=true

    buildImage:
        name: Build Docker Image & Upload to Registry
        runs-on: ubuntu-latest
        needs: backendTests

        if: github.ref_name == 'main'

        env:
            SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
            SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
            SKIP: ${{ secrets.SKIP }}
            VITE_DSN: ${{ secrets.VITE_DSN }}

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Log in to DigitalOcean Container Registry
              uses: docker/login-action@v3
              with:
                  registry: docker.io
                  username: tahminator
                  password: ${{ secrets.DOCKER_HUB_PAT }}

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Set Timezone
              uses: szenius/set-timezone@v2.0
              with:
                  timezoneLinux: "America/New_York"

            - name: Set image tags
              run: |
                  echo "TIMESTAMP=$(date +%Y.%m.%d-%H.%M.%S)" >> $GITHUB_ENV
                  echo "GIT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: infra/Dockerfile
                  push: true
                  tags: |
                      tahminator/codebloom:latest
                      tahminator/codebloom:${{ env.TIMESTAMP }}
                      tahminator/codebloom:${{ env.GIT_SHA }}
                  build-args: |
                      SENTRY_AUTH_TOKEN=${{ env.SENTRY_AUTH_TOKEN }}
                      SENTRY_DSN=${{ env.SENTRY_DSN }}
                      SKIP=${{ env.SKIP }}
                      VITE_DSN=${{ env.VITE_DSN }}

    redeploy:
        name: Redeploy on DigitalOcean
        runs-on: ubuntu-latest
        needs: buildImage

        if: github.ref_name == 'main'

        steps:
            - name: Trigger App Platform Redeploy
              run: |
                  curl -s -o /dev/null -w "%{http_code}\n" \
                  -X POST \
                  -H "Authorization: Bearer ${{ secrets.DIGITAL_OCEAN_PAT }}" \
                  -H "Content-Type: application/json" \
                  https://api.digitalocean.com/v2/apps/${{ secrets.DIGITAL_OCEAN_APP_ID }}/deployments
