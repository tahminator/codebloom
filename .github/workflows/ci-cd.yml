name: CI/CD
run-name: Running CI/CD on ${{ github.actor }}'s commits

on:
    push:
        branches:
            - main
    pull_request:

concurrency:
    group: ci-${{ github.ref }}
    cancel-in-progress: true

jobs:
    backendPreTest:
        name: Backend Compile Test
        runs-on: ubuntu-latest

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Set up OpenJDK 21
              uses: actions/setup-java@v4
              with:
                  distribution: "temurin"
                  java-version: "21"
                  cache: "maven"

            - name: Verify Java version
              run: |
                  java -version
                  javac -version
                  echo "JAVA_HOME=$JAVA_HOME"

            - name: Verify that there are no compile time errors in the backend
              run: ./mvnw -B verify -Dmaven.test.skip=true --no-transfer-progress -Denv.SKIP=true

    backendTests:
        name: Backend Tests
        runs-on: ubuntu-latest
        needs: backendPreTest

        env:
            REDIS_URL: ${{ secrets.REDIS_URL }}
            DISCORD_CLIENT_ID: ${{ secrets.DISCORD_CLIENT_ID }}
            DISCORD_CLIENT_SECRET: ${{ secrets.DISCORD_CLIENT_SECRET }}
            DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
            ENABLE_DOCUMENTATION: ${{ secrets.ENABLE_DOCUMENTATION }}
            GH_USERNAME: ${{ secrets.GH_USERNAME }}
            GH_PASSWORD: ${{ secrets.GH_PASSWORD }}
            DISCORD_PATINA_GUILD_ID: ${{ secrets.DISCORD_PATINA_GUILD_ID }}
            DISCORD_PATINA_LEETCODE_CHANNEL_ID: ${{ secrets.DISCORD_PATINA_LEETCODE_CHANNEL_ID }}
            DISCORD_REPORTING_GUILD_ID: ${{ secrets.DISCORD_REPORTING_GUILD_ID }}
            DISCORD_REPORTING_CHANNEL_ID: ${{ secrets.DISCORD_REPORTING_CHANNEL_ID }}
            DISCORD_REPORTING_LOG_GUILD_ID: ${{ secrets.DISCORD_REPORTING_LOG_GUILD_ID }}
            DISCORD_REPORTING_LOG_CHANNEL_ID: ${{ secrets.DISCORD_REPORTING_LOG_CHANNEL_ID }}
            GH_EMAIL_HOST: ${{ secrets.GH_EMAIL_HOST }}
            GH_EMAIL_PORT: ${{ secrets.GH_EMAIL_PORT }}
            GH_EMAIL_TYPE: ${{ secrets.GH_EMAIL_TYPE }}
            GH_EMAIL_USERNAME: ${{ secrets.GH_EMAIL_USERNAME }}
            GH_EMAIL_PASSWORD: ${{ secrets.GH_EMAIL_PASSWORD }}
            CODEBLOOM_EMAIL_HOST: ${{ secrets.CODEBLOOM_EMAIL_HOST }}
            CODEBLOOM_EMAIL_PORT: ${{ secrets.CODEBLOOM_EMAIL_PORT }}
            CODEBLOOM_EMAIL_TYPE: ${{ secrets.CODEBLOOM_EMAIL_TYPE }}
            CODEBLOOM_EMAIL_USERNAME: ${{ secrets.CODEBLOOM_EMAIL_USERNAME }}
            CODEBLOOM_EMAIL_PASSWORD: ${{ secrets.CODEBLOOM_EMAIL_PASSWORD }}
            SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
            SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
            SKIP: ${{ secrets.SKIP }}
            VITE_DSN: ${{ secrets.VITE_DSN }}
            SECRET_KEY: ${{ secrets.SECRET_KEY }}
            SERVER_URL: ${{ secrets.SERVER_URL }}

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20

            - name: Set up OpenJDK 21
              uses: actions/setup-java@v4
              with:
                  distribution: "temurin"
                  java-version: "21"
                  cache: "maven"

            - name: Verify Java version
              run: |
                  java -version
                  javac -version
                  echo "JAVA_HOME=$JAVA_HOME"

            - name: Run script
              run: bash .github/scripts/run-backend-tests.sh

    frontendTests:
        name: Frontend Tests
        runs-on: ubuntu-latest
        needs: backendPreTest

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20

            - name: Set up OpenJDK 21
              uses: actions/setup-java@v4
              with:
                  distribution: "temurin"
                  java-version: "21"
                  cache: "maven"

            - name: Verify Java version
              run: |
                  java -version
                  javac -version
                  echo "JAVA_HOME=$JAVA_HOME"

            - name: Fix a bug with corepack by installing corepack globally
              run: npm i -g corepack@latest
              working-directory: js

            - name: Run script
              run: bash .github/scripts/run-frontend-tests.sh
              env:
                  REDIS_URL: ${{ secrets.REDIS_URL }}
                  DISCORD_CLIENT_ID: ${{ secrets.DISCORD_CLIENT_ID }}
                  DISCORD_CLIENT_SECRET: ${{ secrets.DISCORD_CLIENT_SECRET }}
                  DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
                  ENABLE_DOCUMENTATION: ${{ secrets.ENABLE_DOCUMENTATION }}
                  GH_USERNAME: ${{ secrets.GH_USERNAME }}
                  GH_PASSWORD: ${{ secrets.GH_PASSWORD }}
                  DISCORD_PATINA_GUILD_ID: ${{ secrets.DISCORD_PATINA_GUILD_ID }}
                  DISCORD_PATINA_LEETCODE_CHANNEL_ID: ${{ secrets.DISCORD_PATINA_LEETCODE_CHANNEL_ID }}
                  DISCORD_REPORTING_GUILD_ID: ${{ secrets.DISCORD_REPORTING_GUILD_ID }}
                  DISCORD_REPORTING_CHANNEL_ID: ${{ secrets.DISCORD_REPORTING_CHANNEL_ID }}
                  DISCORD_REPORTING_LOG_GUILD_ID: ${{ secrets.DISCORD_REPORTING_LOG_GUILD_ID }}
                  DISCORD_REPORTING_LOG_CHANNEL_ID: ${{ secrets.DISCORD_REPORTING_LOG_CHANNEL_ID }}
                  GH_EMAIL_HOST: ${{ secrets.GH_EMAIL_HOST }}
                  GH_EMAIL_PORT: ${{ secrets.GH_EMAIL_PORT }}
                  GH_EMAIL_TYPE: ${{ secrets.GH_EMAIL_TYPE }}
                  GH_EMAIL_USERNAME: ${{ secrets.GH_EMAIL_USERNAME }}
                  GH_EMAIL_PASSWORD: ${{ secrets.GH_EMAIL_PASSWORD }}
                  CODEBLOOM_EMAIL_HOST: ${{ secrets.CODEBLOOM_EMAIL_HOST }}
                  CODEBLOOM_EMAIL_PORT: ${{ secrets.CODEBLOOM_EMAIL_PORT }}
                  CODEBLOOM_EMAIL_TYPE: ${{ secrets.CODEBLOOM_EMAIL_TYPE }}
                  CODEBLOOM_EMAIL_USERNAME: ${{ secrets.CODEBLOOM_EMAIL_USERNAME }}
                  CODEBLOOM_EMAIL_PASSWORD: ${{ secrets.CODEBLOOM_EMAIL_PASSWORD }}
                  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
                  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
                  SKIP: ${{ secrets.SKIP }}
                  VITE_DSN: ${{ secrets.VITE_DSN }}
                  SECRET_KEY: ${{ secrets.SECRET_KEY }}
                  SERVER_URL: ${{ secrets.SERVER_URL }}

    validateDBSchema:
        name: Validate DB Schema on Prod DB
        runs-on: ubuntu-latest
        needs: backendPreTest
        environment: production-ro

        env:
            DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
            DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
            DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
            DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
            DATABASE_USER: ${{ secrets.DATABASE_USER }}

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Set up OpenJDK 21
              uses: actions/setup-java@v4
              with:
                  distribution: "temurin"
                  java-version: "21"
                  cache: "maven"

            - name: Verify Java version
              run: |
                  java -version
                  javac -version
                  echo "JAVA_HOME=$JAVA_HOME"

            - name: Validate DB Schema
              run: ./mvnw flyway:validate -Dflyway.locations=filesystem:./db/migration -Dflyway.ignoreMigrationPatterns="*:pending"

    buildImage:
        name: Build Docker Image & Upload to Registry
        runs-on: ubuntu-latest
        needs: [validateDBSchema, backendTests, frontendTests]

        if: github.ref_name == 'main'

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up OpenJDK 21
              uses: actions/setup-java@v4
              with:
                  distribution: "temurin"
                  java-version: "21"
                  cache: "maven"

            - name: Verify Java version
              run: |
                  java -version
                  javac -version
                  echo "JAVA_HOME=$JAVA_HOME"

            - name: Run script
              run: bash .github/scripts/build-image.sh
              env:
                  REDIS_URL: ${{ secrets.REDIS_URL }}
                  DOCKER_HUB_PAT: ${{ secrets.DOCKER_HUB_PAT }}
                  DISCORD_CLIENT_ID: ${{ secrets.DISCORD_CLIENT_ID }}
                  DISCORD_CLIENT_SECRET: ${{ secrets.DISCORD_CLIENT_SECRET }}
                  DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
                  ENABLE_DOCUMENTATION: ${{ secrets.ENABLE_DOCUMENTATION }}
                  GH_USERNAME: ${{ secrets.GH_USERNAME }}
                  GH_PASSWORD: ${{ secrets.GH_PASSWORD }}
                  DISCORD_PATINA_GUILD_ID: ${{ secrets.DISCORD_PATINA_GUILD_ID }}
                  DISCORD_PATINA_LEETCODE_CHANNEL_ID: ${{ secrets.DISCORD_PATINA_LEETCODE_CHANNEL_ID }}
                  DISCORD_REPORTING_GUILD_ID: ${{ secrets.DISCORD_REPORTING_GUILD_ID }}
                  DISCORD_REPORTING_CHANNEL_ID: ${{ secrets.DISCORD_REPORTING_CHANNEL_ID }}
                  DISCORD_REPORTING_LOG_GUILD_ID: ${{ secrets.DISCORD_REPORTING_LOG_GUILD_ID }}
                  DISCORD_REPORTING_LOG_CHANNEL_ID: ${{ secrets.DISCORD_REPORTING_LOG_CHANNEL_ID }}
                  GH_EMAIL_HOST: ${{ secrets.GH_EMAIL_HOST }}
                  GH_EMAIL_PORT: ${{ secrets.GH_EMAIL_PORT }}
                  GH_EMAIL_TYPE: ${{ secrets.GH_EMAIL_TYPE }}
                  GH_EMAIL_USERNAME: ${{ secrets.GH_EMAIL_USERNAME }}
                  GH_EMAIL_PASSWORD: ${{ secrets.GH_EMAIL_PASSWORD }}
                  CODEBLOOM_EMAIL_HOST: ${{ secrets.CODEBLOOM_EMAIL_HOST }}
                  CODEBLOOM_EMAIL_PORT: ${{ secrets.CODEBLOOM_EMAIL_PORT }}
                  CODEBLOOM_EMAIL_TYPE: ${{ secrets.CODEBLOOM_EMAIL_TYPE }}
                  CODEBLOOM_EMAIL_USERNAME: ${{ secrets.CODEBLOOM_EMAIL_USERNAME }}
                  CODEBLOOM_EMAIL_PASSWORD: ${{ secrets.CODEBLOOM_EMAIL_PASSWORD }}
                  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
                  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
                  SKIP: ${{ secrets.SKIP }}
                  VITE_DSN: ${{ secrets.VITE_DSN }}
                  SECRET_KEY: ${{ secrets.SECRET_KEY }}
                  SERVER_URL: ${{ secrets.SERVER_URL }}

    redeploy:
        name: Redeploy on DigitalOcean
        runs-on: ubuntu-latest
        needs: buildImage
        environment: production

        if: github.ref_name == 'main'

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Set up OpenJDK 21
              uses: actions/setup-java@v4
              with:
                  distribution: "temurin"
                  java-version: "21"
                  cache: "maven"

            - name: Verify Java version
              run: |
                  java -version
                  javac -version
                  echo "JAVA_HOME=$JAVA_HOME"

            - name: Migrate Production DB
              run: ./mvnw flyway:migrate -Dflyway.locations=filesystem:./db/migration
              env:
                  DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
                  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
                  DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
                  DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
                  DATABASE_USER: ${{ secrets.DATABASE_USER }}

            - name: Trigger App Platform Redeploy
              run: |
                  RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
                  -X POST \
                  -H "Authorization: Bearer ${{ secrets.DIGITAL_OCEAN_PAT }}" \
                  -H "Content-Type: application/json" \
                  https://api.digitalocean.com/v2/apps/${{ secrets.DIGITAL_OCEAN_APP_ID }}/deployments)

                  HTTP_BODY=$(echo "$RESPONSE" | sed -e 's/HTTPSTATUS:.*//g')
                  HTTP_STATUS=$(echo "$RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

                  echo "$HTTP_STATUS"

                  if [ "$HTTP_STATUS" -lt 200 ] || [ "$HTTP_STATUS" -ge 300 ]; then
                      exit 1
                  fi

                  DEPLOYMENT_ID=$(echo "$HTTP_BODY" | jq -r '.deployment.id')

                  echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_ENV

            - name: Poll Deployment Status
              run: |
                  DEPLOYMENT_ID="$deployment_id"

                   if [ -z "$DEPLOYMENT_ID" ]; then
                       echo "Deployment ID is empty."
                       exit 1
                   fi

                  echo "Waiting for deployment to be promoted."

                  for i in {1..60}; do
                      RESPONSE=$(curl -s -X GET \
                          -H "Content-Type: application/json" \
                          -H "Authorization: Bearer ${{ secrets.DIGITAL_OCEAN_PAT }}" \
                          "https://api.digitalocean.com/v2/apps/${{ secrets.DIGITAL_OCEAN_APP_ID }}/deployments/$DEPLOYMENT_ID")

                      PHASE=$(echo "$RESPONSE" | jq -r '.deployment.phase')

                      echo "Deployment phase: $PHASE"

                      if [ "$PHASE" == "ACTIVE" ]; then
                          echo "Deployment is active."
                          exit 0
                      elif [ "$PHASE" == "SUPERSEDED" ] || [ "$PHASE" == "ERROR" ] || [ "$PHASE" == "CANCELED" ]; then
                          echo "Deployment failed with phase: $PHASE"
                          exit 1
                      fi

                      echo "Waiting for deployment to complete, sleep 10... ($i/60)"
                      sleep 10
                  done

                  echo "Deployment did not reach a valid state within 10 minutes."
                  exit 1
