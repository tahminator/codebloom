name: Deploying to staging
run-name: Deploying to staging

on:
    repository_dispatch:
        types: [deploy-command]

permissions:
    contents: write
    issues: write
    pull-requests: write

jobs:
    getPRHead:
        name: Get PR head SHA
        runs-on: ubuntu-latest
        outputs:
            sha: ${{ steps.pr-head.outputs.result }}
        steps:
            - name: Get PR head SHA
              id: pr-head
              uses: actions/github-script@v7
              with:
                  result-encoding: string
                  script: |
                      const prId = '${{ github.event.client_payload.slash_command.args.named.prId }}';
                      const { data: pr } = await github.rest.pulls.get({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          pull_number: parseInt(prId, 10)
                      });
                      return pr.head.sha;

    sendMessage:
        name: Send deploying to staging message
        runs-on: ubuntu-latest
        needs: getPRHead

        steps:
            - name: Comment on PR
              uses: actions/github-script@v7
              with:
                  script: |
                      const prId = '${{ github.event.client_payload.slash_command.args.named.prId }}';
                      const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
                      const commitHash = '${{ needs.getPRHead.outputs.sha }}';

                      await github.rest.issues.createComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number: parseInt(prId, 10),
                          body: `The command to deploy to staging for the commit ${commitHash} has been triggered. [View action run](${runUrl})`
                      });

    backendTests:
        name: Backend Tests
        runs-on: ubuntu-latest
        needs: sendMessage

        env:
            DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
            DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
            DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
            DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
            DATABASE_USER: ${{ secrets.DATABASE_USER }}
            DISCORD_CLIENT_ID: ${{ secrets.DISCORD_CLIENT_ID }}
            DISCORD_CLIENT_SECRET: ${{ secrets.DISCORD_CLIENT_SECRET }}
            DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
            ENABLE_DOCUMENTATION: ${{ secrets.ENABLE_DOCUMENTATION }}
            GH_USERNAME: ${{ secrets.GH_USERNAME }}
            GH_PASSWORD: ${{ secrets.GH_PASSWORD }}
            DISCORD_PATINA_GUILD_ID: ${{ secrets.DISCORD_PATINA_GUILD_ID }}
            DISCORD_PATINA_LEETCODE_CHANNEL_ID: ${{ secrets.DISCORD_PATINA_LEETCODE_CHANNEL_ID }}
            DISCORD_REPORTING_GUILD_ID: ${{ secrets.DISCORD_REPORTING_GUILD_ID }}
            DISCORD_REPORTING_CHANNEL_ID: ${{ secrets.DISCORD_REPORTING_CHANNEL_ID }}
            GH_EMAIL_HOST: ${{ secrets.GH_EMAIL_HOST }}
            GH_EMAIL_PORT: ${{ secrets.GH_EMAIL_PORT }}
            GH_EMAIL_TYPE: ${{ secrets.GH_EMAIL_TYPE }}
            GH_EMAIL_USERNAME: ${{ secrets.GH_EMAIL_USERNAME }}
            GH_EMAIL_PASSWORD: ${{ secrets.GH_EMAIL_PASSWORD }}
            CODEBLOOM_EMAIL_HOST: ${{ secrets.CODEBLOOM_EMAIL_HOST }}
            CODEBLOOM_EMAIL_PORT: ${{ secrets.CODEBLOOM_EMAIL_PORT }}
            CODEBLOOM_EMAIL_TYPE: ${{ secrets.CODEBLOOM_EMAIL_TYPE }}
            CODEBLOOM_EMAIL_USERNAME: ${{ secrets.CODEBLOOM_EMAIL_USERNAME }}
            CODEBLOOM_EMAIL_PASSWORD: ${{ secrets.CODEBLOOM_EMAIL_PASSWORD }}
            SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
            SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
            SKIP: ${{ secrets.SKIP }}
            VITE_DSN: ${{ secrets.VITE_DSN }}
            SECRET_KEY: ${{ secrets.SECRET_KEY }}
            SERVER_URL: ${{ secrets.SERVER_URL }}

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
              with:
                  ref: ${{ needs.getPRHead.outputs.sha }}

            - name: Set up OpenJDK 21
              uses: actions/setup-java@v4
              with:
                  distribution: "temurin"
                  java-version: "21"
                  cache: "maven"

            - name: Verify Java version
              run: |
                  java -version
                  javac -version
                  echo "JAVA_HOME=$JAVA_HOME"

            - name: Build & Install
              run: ./mvnw -B install -D skipTests --no-transfer-progress -Denv.SKIP=true

            - name: Run Checkstyle
              run: ./mvnw checkstyle:check -Denv.SKIP=true

            - name: Ensure browsers are installed
              run: ./mvnw exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install --with-deps firefox"

            - name: Run migration on CI DB
              run: ./mvnw flyway:migrate -Dflyway.locations=filesystem:./db

            - name: Run Tests
              run: ./mvnw test -Denv.SKIP=true -Dspring.profiles.active=ci

    frontendTests:
        name: Frontend Tests
        runs-on: ubuntu-latest
        needs: backendTests

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
              with:
                  ref: ${{ needs.getPRHead.outputs.sha }}

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20

            - name: Set up OpenJDK 21
              uses: actions/setup-java@v4
              with:
                  distribution: "temurin"
                  java-version: "21"
                  cache: "maven"

            - name: Verify Java version
              run: |
                  java -version
                  javac -version
                  echo "JAVA_HOME=$JAVA_HOME"

            - name: Start backend instance
              run: |
                  ./mvnw -Dspring-boot.run.profiles=ci spring-boot:run > backend.log 2>&1 &
                  echo $! > spring_pid.txt
              env:
                  DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
                  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
                  DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
                  DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
                  DATABASE_USER: ${{ secrets.DATABASE_USER }}
                  DISCORD_CLIENT_ID: ${{ secrets.DISCORD_CLIENT_ID }}
                  DISCORD_CLIENT_SECRET: ${{ secrets.DISCORD_CLIENT_SECRET }}
                  DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
                  ENABLE_DOCUMENTATION: ${{ secrets.ENABLE_DOCUMENTATION }}
                  GH_USERNAME: ${{ secrets.GH_USERNAME }}
                  GH_PASSWORD: ${{ secrets.GH_PASSWORD }}
                  DISCORD_PATINA_GUILD_ID: ${{ secrets.DISCORD_PATINA_GUILD_ID }}
                  DISCORD_PATINA_LEETCODE_CHANNEL_ID: ${{ secrets.DISCORD_PATINA_LEETCODE_CHANNEL_ID }}
                  DISCORD_REPORTING_GUILD_ID: ${{ secrets.DISCORD_REPORTING_GUILD_ID }}
                  DISCORD_REPORTING_CHANNEL_ID: ${{ secrets.DISCORD_REPORTING_CHANNEL_ID }}
                  GH_EMAIL_HOST: ${{ secrets.GH_EMAIL_HOST }}
                  GH_EMAIL_PORT: ${{ secrets.GH_EMAIL_PORT }}
                  GH_EMAIL_TYPE: ${{ secrets.GH_EMAIL_TYPE }}
                  GH_EMAIL_USERNAME: ${{ secrets.GH_EMAIL_USERNAME }}
                  GH_EMAIL_PASSWORD: ${{ secrets.GH_EMAIL_PASSWORD }}
                  CODEBLOOM_EMAIL_HOST: ${{ secrets.CODEBLOOM_EMAIL_HOST }}
                  CODEBLOOM_EMAIL_PORT: ${{ secrets.CODEBLOOM_EMAIL_PORT }}
                  CODEBLOOM_EMAIL_TYPE: ${{ secrets.CODEBLOOM_EMAIL_TYPE }}
                  CODEBLOOM_EMAIL_USERNAME: ${{ secrets.CODEBLOOM_EMAIL_USERNAME }}
                  CODEBLOOM_EMAIL_PASSWORD: ${{ secrets.CODEBLOOM_EMAIL_PASSWORD }}
                  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
                  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
                  SKIP: ${{ secrets.SKIP }}
                  VITE_DSN: ${{ secrets.VITE_DSN }}
                  SECRET_KEY: ${{ secrets.SECRET_KEY }}
                  SERVER_URL: ${{ secrets.SERVER_URL }}

            - name: Wait for backend to start
              run: |
                  for i in {1..30}; do
                     if curl -s http://localhost:8080/api | grep -q '"success":true'; then
                        echo "Backend is up!";
                        exit 0
                     fi;
                        echo "Waiting for backend... ($i/30)";
                     sleep 2;
                  done
                  echo "Backend failed to start in time."
                  cat spring_pid.txt | xargs -r kill || true
                  exit 1

            - name: Fix a bug with corepack by installing corepack globally
              run: npm i -g corepack@latest
              working-directory: js

            - name: Install Dependencies
              run: corepack enable pnpm && pnpm i --frozen-lockfile
              working-directory: js

            - name: Generate types
              run: pnpm run generate
              working-directory: js

            - name: Run full suite of tests + linters + autoformatters
              run: pnpm run test
              working-directory: js

            - name: Stop backend server
              if: always()
              run: |
                  if kill $(cat spring_pid.txt) > /dev/null 2>&1; then
                      echo "Backend process killed successfully."
                  else
                      echo "Backend was not running or already stopped."
                  fi

    validateDBSchema:
        name: Validate DB Schema on Staging DB
        runs-on: ubuntu-latest
        needs: frontendTests
        environment: staging

        env:
            DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
            DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
            DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
            DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
            DATABASE_USER: ${{ secrets.DATABASE_USER }}
            DISCORD_CLIENT_ID: ${{ secrets.DISCORD_CLIENT_ID }}
            DISCORD_CLIENT_SECRET: ${{ secrets.DISCORD_CLIENT_SECRET }}
            DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
            ENABLE_DOCUMENTATION: ${{ secrets.ENABLE_DOCUMENTATION }}
            GH_USERNAME: ${{ secrets.GH_USERNAME }}
            GH_PASSWORD: ${{ secrets.GH_PASSWORD }}
            DISCORD_PATINA_GUILD_ID: ${{ secrets.DISCORD_PATINA_GUILD_ID }}
            DISCORD_PATINA_LEETCODE_CHANNEL_ID: ${{ secrets.DISCORD_PATINA_LEETCODE_CHANNEL_ID }}
            DISCORD_REPORTING_GUILD_ID: ${{ secrets.DISCORD_REPORTING_GUILD_ID }}
            DISCORD_REPORTING_CHANNEL_ID: ${{ secrets.DISCORD_REPORTING_CHANNEL_ID }}
            GH_EMAIL_HOST: ${{ secrets.GH_EMAIL_HOST }}
            GH_EMAIL_PORT: ${{ secrets.GH_EMAIL_PORT }}
            GH_EMAIL_TYPE: ${{ secrets.GH_EMAIL_TYPE }}
            GH_EMAIL_USERNAME: ${{ secrets.GH_EMAIL_USERNAME }}
            GH_EMAIL_PASSWORD: ${{ secrets.GH_EMAIL_PASSWORD }}
            CODEBLOOM_EMAIL_HOST: ${{ secrets.CODEBLOOM_EMAIL_HOST }}
            CODEBLOOM_EMAIL_PORT: ${{ secrets.CODEBLOOM_EMAIL_PORT }}
            CODEBLOOM_EMAIL_TYPE: ${{ secrets.CODEBLOOM_EMAIL_TYPE }}
            CODEBLOOM_EMAIL_USERNAME: ${{ secrets.CODEBLOOM_EMAIL_USERNAME }}
            CODEBLOOM_EMAIL_PASSWORD: ${{ secrets.CODEBLOOM_EMAIL_PASSWORD }}
            SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
            SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
            SKIP: ${{ secrets.SKIP }}
            VITE_DSN: ${{ secrets.VITE_DSN }}
            SECRET_KEY: ${{ secrets.SECRET_KEY }}
            SERVER_URL: ${{ secrets.SERVER_URL }}

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
              with:
                  ref: ${{ needs.getPRHead.outputs.sha }}

            - name: Set up OpenJDK 21
              uses: actions/setup-java@v4
              with:
                  distribution: "temurin"
                  java-version: "21"
                  cache: "maven"

            - name: Verify Java version
              run: |
                  java -version
                  javac -version
                  echo "JAVA_HOME=$JAVA_HOME"

            - name: Validate DB Schema
              run: ./mvnw flyway:validate -Dflyway.locations=filesystem:./db/migration -Dflyway.ignoreMigrationPatterns="*:pending"

    buildImage:
        name: Build Docker Image & Upload to Registry
        runs-on: ubuntu-latest
        needs: validateDBSchema
        environment: staging

        env:
            SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
            SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
            SKIP: ${{ secrets.SKIP }}
            VITE_DSN: ${{ secrets.VITE_DSN }}

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  ref: ${{ needs.getPRHead.outputs.sha }}

            - name: Set up OpenJDK 21
              uses: actions/setup-java@v4
              with:
                  distribution: "temurin"
                  java-version: "21"
                  cache: "maven"

            - name: Verify Java version
              run: |
                  java -version
                  javac -version
                  echo "JAVA_HOME=$JAVA_HOME"

            - name: Start backend instance
              run: |
                  ./mvnw -Dspring-boot.run.profiles=ci spring-boot:run > backend.log 2>&1 &
                  echo $! > spring_pid.txt
              env:
                  DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
                  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
                  DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
                  DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
                  DATABASE_USER: ${{ secrets.DATABASE_USER }}
                  DISCORD_CLIENT_ID: ${{ secrets.DISCORD_CLIENT_ID }}
                  DISCORD_CLIENT_SECRET: ${{ secrets.DISCORD_CLIENT_SECRET }}
                  DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
                  ENABLE_DOCUMENTATION: ${{ secrets.ENABLE_DOCUMENTATION }}
                  GH_USERNAME: ${{ secrets.GH_USERNAME }}
                  GH_PASSWORD: ${{ secrets.GH_PASSWORD }}
                  DISCORD_PATINA_GUILD_ID: ${{ secrets.DISCORD_PATINA_GUILD_ID }}
                  DISCORD_PATINA_LEETCODE_CHANNEL_ID: ${{ secrets.DISCORD_PATINA_LEETCODE_CHANNEL_ID }}
                  DISCORD_REPORTING_GUILD_ID: ${{ secrets.DISCORD_REPORTING_GUILD_ID }}
                  DISCORD_REPORTING_CHANNEL_ID: ${{ secrets.DISCORD_REPORTING_CHANNEL_ID }}
                  GH_EMAIL_HOST: ${{ secrets.GH_EMAIL_HOST }}
                  GH_EMAIL_PORT: ${{ secrets.GH_EMAIL_PORT }}
                  GH_EMAIL_TYPE: ${{ secrets.GH_EMAIL_TYPE }}
                  GH_EMAIL_USERNAME: ${{ secrets.GH_EMAIL_USERNAME }}
                  GH_EMAIL_PASSWORD: ${{ secrets.GH_EMAIL_PASSWORD }}
                  CODEBLOOM_EMAIL_HOST: ${{ secrets.CODEBLOOM_EMAIL_HOST }}
                  CODEBLOOM_EMAIL_PORT: ${{ secrets.CODEBLOOM_EMAIL_PORT }}
                  CODEBLOOM_EMAIL_TYPE: ${{ secrets.CODEBLOOM_EMAIL_TYPE }}
                  CODEBLOOM_EMAIL_USERNAME: ${{ secrets.CODEBLOOM_EMAIL_USERNAME }}
                  CODEBLOOM_EMAIL_PASSWORD: ${{ secrets.CODEBLOOM_EMAIL_PASSWORD }}
                  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
                  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
                  SKIP: ${{ secrets.SKIP }}
                  VITE_DSN: ${{ secrets.VITE_DSN }}
                  SECRET_KEY: ${{ secrets.SECRET_KEY }}
                  SERVER_URL: ${{ secrets.SERVER_URL }}

            - name: Wait for backend to start
              run: |
                  for i in {1..30}; do
                     if curl -s http://localhost:8080/api | grep -q '"success":true'; then
                        echo "Backend is up!";
                        exit 0
                     fi;
                        echo "Waiting for backend... ($i/30)";
                     sleep 2;
                  done
                  echo "Backend failed to start in time."
                  cat spring_pid.txt | xargs -r kill || true
                  exit 1

            - name: Fix a bug with corepack by installing corepack globally
              run: npm i -g corepack@latest
              working-directory: js

            - name: Install Dependencies
              run: corepack enable pnpm && pnpm i --frozen-lockfile
              working-directory: js

            # This step needs to be completed in buildImage because we now utilize non-erasable types
            # which means we actually need to generate the schema file before running the Dockerfile.
            # TODO: Move this to inside of the Dockerfile; it's much harder to reason about when the image building process
            # is split across two different places
            - name: Generate types
              run: pnpm run generate
              working-directory: js

            - name: Log in to DigitalOcean Container Registry
              uses: docker/login-action@v3
              with:
                  registry: docker.io
                  username: tahminator
                  password: ${{ secrets.DOCKER_HUB_PAT }}

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Set Timezone
              uses: szenius/set-timezone@v2.0
              with:
                  timezoneLinux: "America/New_York"

            - name: Set image tags
              run: |
                  echo "TIMESTAMP=$(date +%Y.%m.%d-%H.%M.%S)" >> $GITHUB_ENV
                  echo "GIT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: infra/Dockerfile
                  push: true
                  tags: |
                      tahminator/codebloom:staging-latest
                      tahminator/codebloom:staging-${{ env.TIMESTAMP }}
                      tahminator/codebloom:staging-${{ env.GIT_SHA }}
                  build-args: |
                      SENTRY_AUTH_TOKEN=${{ env.SENTRY_AUTH_TOKEN }}
                      SENTRY_DSN=${{ env.SENTRY_DSN }}
                      SKIP=${{ env.SKIP }}
                      VITE_DSN=${{ env.VITE_DSN }}

    redeploy:
        name: Redeploy on DigitalOcean
        runs-on: ubuntu-latest
        needs: buildImage
        environment: staging

        if: github.ref_name == 'main'

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
              with:
                  ref: ${{ needs.getPRHead.outputs.sha }}

            - name: Set up OpenJDK 21
              uses: actions/setup-java@v4
              with:
                  distribution: "temurin"
                  java-version: "21"
                  cache: "maven"

            - name: Verify Java version
              run: |
                  java -version
                  javac -version
                  echo "JAVA_HOME=$JAVA_HOME"

            - name: Migrate Staging DB
              run: ./mvnw flyway:migrate -Dflyway.locations=filesystem:./db/migration
              env:
                  DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
                  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
                  DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
                  DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
                  DATABASE_USER: ${{ secrets.DATABASE_USER }}
                  DISCORD_CLIENT_ID: ${{ secrets.DISCORD_CLIENT_ID }}
                  DISCORD_CLIENT_SECRET: ${{ secrets.DISCORD_CLIENT_SECRET }}
                  DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
                  ENABLE_DOCUMENTATION: ${{ secrets.ENABLE_DOCUMENTATION }}
                  GH_USERNAME: ${{ secrets.GH_USERNAME }}
                  GH_PASSWORD: ${{ secrets.GH_PASSWORD }}
                  DISCORD_PATINA_GUILD_ID: ${{ secrets.DISCORD_PATINA_GUILD_ID }}
                  DISCORD_PATINA_LEETCODE_CHANNEL_ID: ${{ secrets.DISCORD_PATINA_LEETCODE_CHANNEL_ID }}
                  DISCORD_REPORTING_GUILD_ID: ${{ secrets.DISCORD_REPORTING_GUILD_ID }}
                  DISCORD_REPORTING_CHANNEL_ID: ${{ secrets.DISCORD_REPORTING_CHANNEL_ID }}
                  GH_EMAIL_HOST: ${{ secrets.GH_EMAIL_HOST }}
                  GH_EMAIL_PORT: ${{ secrets.GH_EMAIL_PORT }}
                  GH_EMAIL_TYPE: ${{ secrets.GH_EMAIL_TYPE }}
                  GH_EMAIL_USERNAME: ${{ secrets.GH_EMAIL_USERNAME }}
                  GH_EMAIL_PASSWORD: ${{ secrets.GH_EMAIL_PASSWORD }}
                  CODEBLOOM_EMAIL_HOST: ${{ secrets.CODEBLOOM_EMAIL_HOST }}
                  CODEBLOOM_EMAIL_PORT: ${{ secrets.CODEBLOOM_EMAIL_PORT }}
                  CODEBLOOM_EMAIL_TYPE: ${{ secrets.CODEBLOOM_EMAIL_TYPE }}
                  CODEBLOOM_EMAIL_USERNAME: ${{ secrets.CODEBLOOM_EMAIL_USERNAME }}
                  CODEBLOOM_EMAIL_PASSWORD: ${{ secrets.CODEBLOOM_EMAIL_PASSWORD }}
                  TZ: ${{ secrets.TZ }}
                  SKIP: ${{ secrets.SKIP }}
                  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
                  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
                  VITE_DSN: ${{ secrets.VITE_DSN }}
                  SECRET_KEY: ${{ secrets.SECRET_KEY }}
                  SERVER_URL: ${{ secrets.SERVER_URL }}

            - name: Trigger App Platform Redeploy
              run: |
                  curl -s -o /dev/null -w "%{http_code}\n" \
                  -X POST \
                  -H "Authorization: Bearer ${{ secrets.DIGITAL_OCEAN_PAT }}" \
                  -H "Content-Type: application/json" \
                  https://api.digitalocean.com/v2/apps/${{ secrets.DIGITAL_OCEAN_APP_ID }}/deployments
