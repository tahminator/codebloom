name: Deploying to staging
run-name: Deploying to staging

concurrency:
    group: deploy-staging-pr-${{ github.event_name == 'repository_dispatch' && github.event.client_payload.slash_command.args.named.prId || github.event.inputs.prId }}
    cancel-in-progress: true

on:
    repository_dispatch:
        types: [deploy-command]
    # this should only be used for testing purposes.
    workflow_dispatch:
        inputs:
            prId:
                description: "PR to deploy"
                required: true


permissions:
    contents: write
    issues: write
    pull-requests: write

jobs:
    getPRHead:
        name: Get PR head SHA
        runs-on: ubuntu-latest
        outputs:
            sha: ${{ steps.pr-head.outputs.result }}
        steps:
            - name: Get PR head SHA
              id: pr-head
              uses: actions/github-script@v7
              with:
                  result-encoding: string
                  script: |
                      const prId =
                          '${{ github.event_name == "repository_dispatch" && github.event.client_payload.slash_command.args.named.prId || github.event.inputs.prId }}';
                      const { data: pr } = await github.rest.pulls.get({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          pull_number: parseInt(prId, 10)
                      });
                       return pr.head.sha;

    sendMessage:
        name: Send deploying to staging message
        runs-on: ubuntu-latest
        needs: getPRHead

        steps:
            - name: Comment on PR
              uses: actions/github-script@v7
              with:
                  script: |
                      const prId =
                          '${{ github.event_name == "repository_dispatch" && github.event.client_payload.slash_command.args.named.prId || github.event.inputs.prId }}';
                      const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
                      const commitHash = '${{ needs.getPRHead.outputs.sha }}';

                      await github.rest.issues.createComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number: parseInt(prId, 10),
                          body: `The command to deploy to staging for the commit ${commitHash} has been triggered. [View action run](${runUrl})`
                      });

    checkExistingImage:
        name: Check if image already exists
        runs-on: ubuntu-latest
        needs: [getPRHead, sendMessage]
        outputs:
            image-exists: ${{ steps.check-image.outputs.exists }}
            git-sha: ${{ steps.set-sha.outputs.sha }}
        steps:
            - name: Set SHA
              id: set-sha
              run: echo "sha=$(echo "${{ needs.getPRHead.outputs.sha }}" | cut -c1-7)" >> $GITHUB_OUTPUT

            - name: Check if Docker image exists
              id: check-image
              run: |
                  SHA7=$(echo "${{ needs.getPRHead.outputs.sha }}" | cut -c1-7)
                  if docker manifest inspect tahminator/codebloom:staging-$SHA7 > /dev/null 2>&1; then
                      echo "exists=true" >> $GITHUB_OUTPUT
                      echo "Image staging-$SHA7 already exists"
                  else
                      echo "exists=false" >> $GITHUB_OUTPUT
                      echo "Image staging-$SHA7 does not exist"
                  fi

    promoteExisting:
        name: Promote existing image to staging-latest
        runs-on: ubuntu-latest
        needs: checkExistingImage
        if: needs.checkExistingImage.outputs.image-exists == 'true'
        steps:
            - name: Log in to Docker Hub
              uses: docker/login-action@v3
              with:
                  registry: docker.io
                  username: tahminator
                  password: ${{ secrets.DOCKER_HUB_PAT }}

            - name: Promote existing image
              run: |
                  SHA7=${{ needs.checkExistingImage.outputs.git-sha }}
                  docker pull tahminator/codebloom:staging-$SHA7
                  docker tag tahminator/codebloom:staging-$SHA7 tahminator/codebloom:staging-latest
                  docker push tahminator/codebloom:staging-latest
                  echo "Promoted staging-$SHA7 to staging-latest"

    backendPreTest:
        name: Backend Compile Test
        runs-on: ubuntu-latest
        needs: [getPRHead, checkExistingImage]
        if: needs.checkExistingImage.outputs.image-exists == 'false'

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
              with:
                  ref: ${{ needs.getPRHead.outputs.sha }}

            - name: Set up OpenJDK 21
              uses: actions/setup-java@v4
              with:
                  distribution: "temurin"
                  java-version: "21"
                  cache: "maven"

            - name: Verify Java version
              run: |
                  java -version
                  javac -version
                  echo "JAVA_HOME=$JAVA_HOME"

            - name: Verify that there are no compile time errors in the backend
              run: ./mvnw -B verify -Dmaven.test.skip=true --no-transfer-progress -Denv.SKIP=true

    backendTests:
        name: Backend Tests
        runs-on: ubuntu-latest
        needs: [getPRHead, checkExistingImage, backendPreTest]
        if: needs.checkExistingImage.outputs.image-exists == 'false'

        env:
            REDIS_URL: ${{ secrets.REDIS_URL }}
            DISCORD_CLIENT_ID: ${{ secrets.DISCORD_CLIENT_ID }}
            DISCORD_CLIENT_SECRET: ${{ secrets.DISCORD_CLIENT_SECRET }}
            DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
            ENABLE_DOCUMENTATION: ${{ secrets.ENABLE_DOCUMENTATION }}
            GH_USERNAME: ${{ secrets.GH_USERNAME }}
            GH_PASSWORD: ${{ secrets.GH_PASSWORD }}
            DISCORD_PATINA_GUILD_ID: ${{ secrets.DISCORD_PATINA_GUILD_ID }}
            DISCORD_PATINA_LEETCODE_CHANNEL_ID: ${{ secrets.DISCORD_PATINA_LEETCODE_CHANNEL_ID }}
            DISCORD_REPORTING_GUILD_ID: ${{ secrets.DISCORD_REPORTING_GUILD_ID }}
            DISCORD_REPORTING_CHANNEL_ID: ${{ secrets.DISCORD_REPORTING_CHANNEL_ID }}
            DISCORD_REPORTING_LOG_GUILD_ID: ${{ secrets.DISCORD_REPORTING_LOG_GUILD_ID }}
            DISCORD_REPORTING_LOG_CHANNEL_ID: ${{ secrets.DISCORD_REPORTING_LOG_CHANNEL_ID }}
            GH_EMAIL_HOST: ${{ secrets.GH_EMAIL_HOST }}
            GH_EMAIL_PORT: ${{ secrets.GH_EMAIL_PORT }}
            GH_EMAIL_TYPE: ${{ secrets.GH_EMAIL_TYPE }}
            GH_EMAIL_USERNAME: ${{ secrets.GH_EMAIL_USERNAME }}
            GH_EMAIL_PASSWORD: ${{ secrets.GH_EMAIL_PASSWORD }}
            CODEBLOOM_EMAIL_HOST: ${{ secrets.CODEBLOOM_EMAIL_HOST }}
            CODEBLOOM_EMAIL_PORT: ${{ secrets.CODEBLOOM_EMAIL_PORT }}
            CODEBLOOM_EMAIL_TYPE: ${{ secrets.CODEBLOOM_EMAIL_TYPE }}
            CODEBLOOM_EMAIL_USERNAME: ${{ secrets.CODEBLOOM_EMAIL_USERNAME }}
            CODEBLOOM_EMAIL_PASSWORD: ${{ secrets.CODEBLOOM_EMAIL_PASSWORD }}
            SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
            SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
            SKIP: ${{ secrets.SKIP }}
            VITE_DSN: ${{ secrets.VITE_DSN }}
            SECRET_KEY: ${{ secrets.SECRET_KEY }}
            SERVER_URL: ${{ secrets.SERVER_URL }}

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
              with:
                  ref: ${{ needs.getPRHead.outputs.sha }}

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20

            - name: Set up OpenJDK 21
              uses: actions/setup-java@v4
              with:
                  distribution: "temurin"
                  java-version: "21"
                  cache: "maven"

            - name: Verify Java version
              run: |
                  java -version
                  javac -version
                  echo "JAVA_HOME=$JAVA_HOME"

            - name: Run script
              run: bash .github/scripts/run-backend-tests.sh

    frontendTests:
        name: Frontend Tests
        runs-on: ubuntu-latest
        needs: [getPRHead, checkExistingImage, backendPreTest]
        if: needs.checkExistingImage.outputs.image-exists == 'false'

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
              with:
                  ref: ${{ needs.getPRHead.outputs.sha }}

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20

            - name: Set up OpenJDK 21
              uses: actions/setup-java@v4
              with:
                  distribution: "temurin"
                  java-version: "21"
                  cache: "maven"

            - name: Verify Java version
              run: |
                  java -version
                  javac -version
                  echo "JAVA_HOME=$JAVA_HOME"

            - name: Fix a bug with corepack by installing corepack globally
              run: npm i -g corepack@latest
              working-directory: js

            - name: Run script
              run: bash .github/scripts/run-frontend-tests.sh
              env:
                  REDIS_URL: ${{ secrets.REDIS_URL }}
                  DISCORD_CLIENT_ID: ${{ secrets.DISCORD_CLIENT_ID }}
                  DISCORD_CLIENT_SECRET: ${{ secrets.DISCORD_CLIENT_SECRET }}
                  DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
                  ENABLE_DOCUMENTATION: ${{ secrets.ENABLE_DOCUMENTATION }}
                  GH_USERNAME: ${{ secrets.GH_USERNAME }}
                  GH_PASSWORD: ${{ secrets.GH_PASSWORD }}
                  DISCORD_PATINA_GUILD_ID: ${{ secrets.DISCORD_PATINA_GUILD_ID }}
                  DISCORD_PATINA_LEETCODE_CHANNEL_ID: ${{ secrets.DISCORD_PATINA_LEETCODE_CHANNEL_ID }}
                  DISCORD_REPORTING_GUILD_ID: ${{ secrets.DISCORD_REPORTING_GUILD_ID }}
                  DISCORD_REPORTING_CHANNEL_ID: ${{ secrets.DISCORD_REPORTING_CHANNEL_ID }}
                  DISCORD_REPORTING_LOG_GUILD_ID: ${{ secrets.DISCORD_REPORTING_LOG_GUILD_ID }}
                  DISCORD_REPORTING_LOG_CHANNEL_ID: ${{ secrets.DISCORD_REPORTING_LOG_CHANNEL_ID }}
                  GH_EMAIL_HOST: ${{ secrets.GH_EMAIL_HOST }}
                  GH_EMAIL_PORT: ${{ secrets.GH_EMAIL_PORT }}
                  GH_EMAIL_TYPE: ${{ secrets.GH_EMAIL_TYPE }}
                  GH_EMAIL_USERNAME: ${{ secrets.GH_EMAIL_USERNAME }}
                  GH_EMAIL_PASSWORD: ${{ secrets.GH_EMAIL_PASSWORD }}
                  CODEBLOOM_EMAIL_HOST: ${{ secrets.CODEBLOOM_EMAIL_HOST }}
                  CODEBLOOM_EMAIL_PORT: ${{ secrets.CODEBLOOM_EMAIL_PORT }}
                  CODEBLOOM_EMAIL_TYPE: ${{ secrets.CODEBLOOM_EMAIL_TYPE }}
                  CODEBLOOM_EMAIL_USERNAME: ${{ secrets.CODEBLOOM_EMAIL_USERNAME }}
                  CODEBLOOM_EMAIL_PASSWORD: ${{ secrets.CODEBLOOM_EMAIL_PASSWORD }}
                  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
                  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
                  SKIP: ${{ secrets.SKIP }}
                  VITE_DSN: ${{ secrets.VITE_DSN }}
                  SECRET_KEY: ${{ secrets.SECRET_KEY }}
                  SERVER_URL: ${{ secrets.SERVER_URL }}

    validateDBSchema:
        name: Validate DB Schema on Staging DB
        runs-on: ubuntu-latest
        needs: [getPRHead, checkExistingImage, backendPreTest]
        if: needs.checkExistingImage.outputs.image-exists == 'false'
        environment: staging

        env:
            DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
            DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
            DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
            DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
            DATABASE_USER: ${{ secrets.DATABASE_USER }}

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
              with:
                  ref: ${{ needs.getPRHead.outputs.sha }}

            - name: Set up OpenJDK 21
              uses: actions/setup-java@v4
              with:
                  distribution: "temurin"
                  java-version: "21"
                  cache: "maven"

            - name: Verify Java version
              run: |
                  java -version
                  javac -version
                  echo "JAVA_HOME=$JAVA_HOME"

            - name: Validate DB Schema
              run: ./mvnw flyway:validate -Dflyway.locations=filesystem:./db/migration -Dflyway.ignoreMigrationPatterns="*:pending"

    buildImage:
        name: Build Docker Image & Upload to Registry
        runs-on: ubuntu-latest
        needs:
            [
                getPRHead,
                checkExistingImage,
                frontendTests,
                backendTests,
                validateDBSchema,
                backendPreTest,
            ]
        if: needs.checkExistingImage.outputs.image-exists == 'false'
        environment: staging

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
              with:
                  ref: ${{ needs.getPRHead.outputs.sha }}

            - name: Set up OpenJDK 21
              uses: actions/setup-java@v4
              with:
                  distribution: "temurin"
                  java-version: "21"
                  cache: "maven"

            - name: Verify Java version
              run: |
                  java -version
                  javac -version
                  echo "JAVA_HOME=$JAVA_HOME"

            - name: Run script
              run: bash .github/scripts/build-image.sh
              env:
                  TAG_PREFIX: staging-
                  DOCKER_HUB_PAT: ${{ secrets.DOCKER_HUB_PAT }}
                  REDIS_URL: ${{ secrets.REDIS_URL }}
                  DISCORD_CLIENT_ID: ${{ secrets.DISCORD_CLIENT_ID }}
                  DISCORD_CLIENT_SECRET: ${{ secrets.DISCORD_CLIENT_SECRET }}
                  DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
                  ENABLE_DOCUMENTATION: ${{ secrets.ENABLE_DOCUMENTATION }}
                  GH_USERNAME: ${{ secrets.GH_USERNAME }}
                  GH_PASSWORD: ${{ secrets.GH_PASSWORD }}
                  DISCORD_PATINA_GUILD_ID: ${{ secrets.DISCORD_PATINA_GUILD_ID }}
                  DISCORD_PATINA_LEETCODE_CHANNEL_ID: ${{ secrets.DISCORD_PATINA_LEETCODE_CHANNEL_ID }}
                  DISCORD_REPORTING_GUILD_ID: ${{ secrets.DISCORD_REPORTING_GUILD_ID }}
                  DISCORD_REPORTING_CHANNEL_ID: ${{ secrets.DISCORD_REPORTING_CHANNEL_ID }}
                  DISCORD_REPORTING_LOG_GUILD_ID: ${{ secrets.DISCORD_REPORTING_LOG_GUILD_ID }}
                  DISCORD_REPORTING_LOG_CHANNEL_ID: ${{ secrets.DISCORD_REPORTING_LOG_CHANNEL_ID }}
                  GH_EMAIL_HOST: ${{ secrets.GH_EMAIL_HOST }}
                  GH_EMAIL_PORT: ${{ secrets.GH_EMAIL_PORT }}
                  GH_EMAIL_TYPE: ${{ secrets.GH_EMAIL_TYPE }}
                  GH_EMAIL_USERNAME: ${{ secrets.GH_EMAIL_USERNAME }}
                  GH_EMAIL_PASSWORD: ${{ secrets.GH_EMAIL_PASSWORD }}
                  CODEBLOOM_EMAIL_HOST: ${{ secrets.CODEBLOOM_EMAIL_HOST }}
                  CODEBLOOM_EMAIL_PORT: ${{ secrets.CODEBLOOM_EMAIL_PORT }}
                  CODEBLOOM_EMAIL_TYPE: ${{ secrets.CODEBLOOM_EMAIL_TYPE }}
                  CODEBLOOM_EMAIL_USERNAME: ${{ secrets.CODEBLOOM_EMAIL_USERNAME }}
                  CODEBLOOM_EMAIL_PASSWORD: ${{ secrets.CODEBLOOM_EMAIL_PASSWORD }}
                  SKIP: ${{ secrets.SKIP }}
                  SECRET_KEY: ${{ secrets.SECRET_KEY }}
                  SERVER_URL: ${{ secrets.SERVER_URL }}

    redeploy:
        name: Redeploy on DigitalOcean
        runs-on: ubuntu-latest
        needs: [buildImage, promoteExisting, getPRHead]
        if: always() && (needs.buildImage.result == 'success' || needs.promoteExisting.result == 'success')
        environment: staging

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
              with:
                  ref: ${{ needs.getPRHead.outputs.sha }}

            - name: Set up OpenJDK 21
              uses: actions/setup-java@v4
              with:
                  distribution: "temurin"
                  java-version: "21"
                  cache: "maven"

            - name: Verify Java version
              run: |
                  java -version
                  javac -version
                  echo "JAVA_HOME=$JAVA_HOME"

            - name: Migrate Staging DB
              run: ./mvnw flyway:migrate -Dflyway.locations=filesystem:./db/migration
              env:
                  DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
                  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
                  DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
                  DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
                  DATABASE_USER: ${{ secrets.DATABASE_USER }}

            - name: Trigger App Platform Redeploy
              run: |
                  RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
                  -X POST \
                  -H "Authorization: Bearer ${{ secrets.DIGITAL_OCEAN_PAT }}" \
                  -H "Content-Type: application/json" \
                  https://api.digitalocean.com/v2/apps/${{ secrets.DIGITAL_OCEAN_APP_ID }}/deployments)

                  HTTP_BODY=$(echo "$RESPONSE" | sed -e 's/HTTPSTATUS:.*//g')
                  HTTP_STATUS=$(echo "$RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

                  echo "$HTTP_STATUS"

                  if [ "$HTTP_STATUS" -lt 200 ] || [ "$HTTP_STATUS" -ge 300 ]; then
                      exit 1
                  fi

                  DEPLOYMENT_ID=$(echo "$HTTP_BODY" | jq -r '.deployment.id')

                  echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_ENV

            - name: Poll Deployment Status
              run: |
                  DEPLOYMENT_ID="$deployment_id"

                   if [ -z "$DEPLOYMENT_ID" ]; then
                       echo "Deployment ID is empty."
                       exit 1
                   fi

                  echo "Waiting for deployment to be promoted."

                  for i in {1..60}; do
                      RESPONSE=$(curl -s -X GET \
                          -H "Content-Type: application/json" \
                          -H "Authorization: Bearer ${{ secrets.DIGITAL_OCEAN_PAT }}" \
                          "https://api.digitalocean.com/v2/apps/${{ secrets.DIGITAL_OCEAN_APP_ID }}/deployments/$DEPLOYMENT_ID")

                      PHASE=$(echo "$RESPONSE" | jq -r '.deployment.phase')

                      echo "Deployment phase: $PHASE"

                      if [ "$PHASE" == "ACTIVE" ]; then
                          echo "Deployment is active."
                          exit 0
                      elif [ "$PHASE" == "SUPERSEDED" ] || [ "$PHASE" == "ERROR" ] || [ "$PHASE" == "CANCELED" ]; then
                          echo "Deployment failed with phase: $PHASE"
                          exit 1
                      fi

                      echo "Waiting for deployment to complete, sleep 10... ($i/60)"
                      sleep 10
                  done

                  echo "Deployment did not reach a valid state within 10 minutes."
                  exit 1

    notifyStatus:
        name: Notify on deployment status
        runs-on: ubuntu-latest
        needs:
            [
                getPRHead,
                checkExistingImage,
                sendMessage,
                backendTests,
                backendPreTest,
                frontendTests,
                validateDBSchema,
                buildImage,
                promoteExisting,
                redeploy,
            ]
        if: always()

        steps:
            - name: Comment on PR about deployment status
              uses: actions/github-script@v7
              with:
                  script: |
                      const prId =
                          '${{ github.event_name == "repository_dispatch" && github.event.client_payload.slash_command.args.named.prId || github.event.inputs.prId }}';
                      const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
                      const commitHash = '${{ needs.getPRHead.outputs.sha }}';

                      const results = ${{ toJSON(needs.*.result) }};
                      const jobNames = ['getPRHead', 'checkExistingImage', 'sendMessage', 'backendTests', 'frontendTests', 'validateDBSchema', 'buildImage', 'promoteExisting', 'redeploy'];
                      const failedJobs = jobNames.filter((name, index) => results[index] === 'failure');
                      const cancelledJobs = jobNames.filter((name, index) => results[index] === 'cancelled');
                      const successJobs = jobNames.filter((name, index) => results[index] === 'success');

                      let statusMessage;
                       if (failedJobs.length > 0 && cancelledJobs.length > 0) {
                           statusMessage = `**Staging deployment failed and was cancelled** for commit ${commitHash}\n\n**Failed job(s):** ${failedJobs.join(', ')}\n**Cancelled job(s):** ${cancelledJobs.join(', ')}`;
                       } else if (failedJobs.length > 0) {
                           statusMessage = `**Staging deployment failed** for commit ${commitHash}\n\n**Failed job(s):** ${failedJobs.join(', ')}`;
                       } else if (cancelledJobs.length > 0) {
                           statusMessage = `**Staging deployment was cancelled** for commit ${commitHash}\n\n**Cancelled job(s):** ${cancelledJobs.join(', ')}`;
                       } else {
                           statusMessage = `**Staging deployment succeeded** for commit ${commitHash}`;
                       }

                      await github.rest.issues.createComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number: parseInt(prId, 10),
                          body: `${statusMessage}\n\n[View run](${runUrl})`
                      });
